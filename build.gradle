buildscript {
    repositories {
        maven {
            url 'https://artifactory.palantir.build/artifactory/all-jar'
        }
    }

    dependencies {
        classpath "com.palantir.gradle.ideatestfix:gradle-idea-test-fix:0.1.0"
    }
}

plugins {
    id 'com.gradle.plugin-publish' version '0.9.2'
    id 'com.jfrog.bintray' version '1.5'
    id 'com.palantir.git-version' version '0.4.0'
    id 'com.github.kt3k.coveralls' version '2.6.3'
    id 'eclipse'
    id 'groovy'
    id 'idea'
    id 'jacoco'
    id 'maven-publish'
}

apply plugin: 'com.palantir.idea-test-fix'

task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

repositories {
    jcenter()
}

dependencies {
    compile gradleApi()

    testCompile gradleTestKit()
    testCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
        exclude module: 'groovy-all'
    }
    testCompile files(createClasspathManifest)
}

if (System.env.CIRCLE_TEST_REPORTS) {
    test.reports.junitXml.destination = new File(System.env.CIRCLE_TEST_REPORTS, getName())
}

group 'com.palantir.gradle.dockertestrunner'
version gitVersion()
sourceCompatibility = 1.7

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier 'sources'
}

publishing {
    publications {
        bintray(MavenPublication) {
            from components.java
            artifact(sourceJar)
            artifact(publishPluginJavaDocsJar)
        }
        jfrog(MavenPublication) {
            from components.java
            artifact(sourceJar)
            artifact(publishPluginJavaDocsJar)
            // required pattern for OJO
            version project.version.replaceAll(/-.*/, '-SNAPSHOT')
        }
    }
}

bintray {
    user = System.env.BINTRAY_USER
    key = System.env.BINTRAY_KEY
    pkg {
        repo = 'releases-internal'
        name = 'gradle-docker-test-runner'
        userOrg = 'palantir'
        licenses = ['Apache-2.0']
        publications = ['bintray']
    }
}
bintrayUpload.dependsOn 'generatePomFileForBintrayPublication', 'sourceJar', 'build'

bintrayUpload.onlyIf {
    System.env.BINTRAY_USER && System.env.BINTRAY_KEY && project.version ==~ /\d+\.\d+\.\d+/
}

pluginBundle {
    website = 'https://github.com/palantir/gradle-docker-test-runner'
    vcsUrl = 'https://github.com/palantir/gradle-docker-test-runner'
    description = 'Adds tasks to run unit tests and generates coverage reports in Docker containers'

    plugins {
        dockerTestRunnerPlugin {
            id = 'com.palantir.docker-test-runner'
            displayName = 'Docker Test Runner'
        }
    }
}

publishPlugins.onlyIf {
    //project.version ==~ /\d+\.\d+\.\d+/
    false
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}
